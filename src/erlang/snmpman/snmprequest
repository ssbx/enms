#!/usr/bin/env escript
%%! -sname snmpman_request

-record(query_config, {
    server_node,
    snmp_version    = "2c",
    target          = "",
    oid             = "",
    community       = "public",
    security_name   = "undefined",
    security_level  = "noAuthNoPriv",
    auth_proto      = "SHA",
    auth_key        = "undefined",
    priv_proto      = "AES",
    priv_key        = "undefined",
    action          = "get"
}).

main(Args) ->
    {ok, Hostname} = inet:gethostname(),
    SrvNode  = list_to_atom(
        lists:flatten(io_lib:format("master@~s", [Hostname]))
    ),
    case net_kernel:connect_node(SrvNode) of
        true ->
            case decode_args(Args, #query_config{server_node=SrvNode}) of
                false ->
                    print_info();
                QConfig ->
                    do_query(QConfig)
            end;
        false -> print_node_info(SrvNode)
    end.

do_query(QConf) ->
    case QConf#query_config.snmp_version of
        "1" ->
            do_community_query(QConf);
        "2c" ->
            do_community_query(QConf);
        "3"  ->
            do_user_query(QConf);
        _ ->
            print_error("Bad snmp version")
    end.

do_community_query(QConf) ->
    Srv         = QConf#query_config.server_node,
    TmpElement  = "tmpCommunityElement",
    TargetConf = [
        {ip_address,    QConf#query_config.target},
        {snmp_version,  QConf#query_config.snmp_version},
        {community,     QConf#query_config.community}
    ],
    ElementArg  = [TmpElement, TargetConf],

    case rpc:call(Srv, snmpman, register_element, ElementArg) of
        {error, Error} -> print_error(Error);
        ok ->
            QueryArg    = [TmpElement, QConf#query_config.oid],
            case QConf#query_config.action of
                "get"  -> Rep = rpc:call(Srv, snmpman, get, QueryArg);
                "walk" -> Rep = rpc:call(Srv, snmpman, walk_tree, QueryArg);
                _ -> print_error("Bad action"), Rep = ""
            end,
            _  = rpc:call(Srv, snmpman, unregister_element, [TmpElement]),
            io:format("~p~n",[Rep])
    end.

do_user_query(QConf) ->
    Srv         = QConf#query_config.server_node,
    TmpElement  = "tmpUserElement",
    ElementConf = [
        {ip_address,        QConf#query_config.target},
        {snmp_version,      QConf#query_config.snmp_version},
        {security_name,     QConf#query_config.security_name},
        {security_level,    QConf#query_config.security_level},
        {priv_proto,        QConf#query_config.priv_proto},
        {priv_key,          QConf#query_config.priv_key},
        {auth_proto,        QConf#query_config.auth_proto},
        {auth_key,          QConf#query_config.auth_key}
    ],
    ElementArg = [TmpElement, ElementConf],
    %% TODO rpc:call snmpman:discovery
    case rpc:call(Srv, snmpman, register_element, ElementArg) of
        {error, Error} -> print_error(Error);
        ok ->
            QueryArg = [TmpElement, QConf#query_config.oid],
            case QConf#query_config.action of
                "get"  -> Rep = rpc:call(Srv, snmpman, get, QueryArg);
                "walk" -> Rep = rpc:call(Srv, snmpman, walk_tree, QueryArg);
                _ -> print_error("Bad action"), Rep = ""
            end,
            ok = rpc:call(Srv, snmpman, unregister_element, [TmpElement]),
            io:format("~p~n",[Rep])
    end.


print_node_info(Node) ->
    io:format("~s ~p ~s", ["No node ", Node, " found.
Execute this command from another console on the same host using the 
same user as the script:

$ erl -sname snmpman_node -eval 'application:start(snmpman)'

"]).

print_error(V) ->
    io:format("ERROR: ~p~n", [V]),
    print_info().

print_info() ->
    io:format("~s", [
"
USAGE: snmpman_test [OPTIONS]

OPTIONS:
  -ip                   ip of the target 
  -v 1|2c|3             specifies SNMP version to use
  -o                    OID to query
  -action               get|walk
SNMP Version 1 or 2c specific
  -c COMMUNITY          set the community string
SNMP Version 3 specific
  -a PROTOCOL           set authentication protocol (MD5|SHA)
  -A PASSPHRASE         set authentication protocol pass phrase
  -l LEVEL              set security level (noAuthNoPriv|authNoPriv|authPriv)
  -u USER-NAME          set security name (e.g. bert)
  -x PROTOCOL           set privacy protocol. Can be:
                            DES|3DES|AES|AES192|AES256|AES192_3DES|AES256_3DES
  -X PASSPHRASE         set privacy protocol pass phrase
"]).






decode_args([], QConfig) ->
    QConfig;
decode_args(["-h" | _], _) ->
    false;
decode_args(["-v" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{snmp_version = V});
decode_args(["-ip" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{target = V});
decode_args(["-o" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{oid = V});
decode_args(["-c" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{community = V});
decode_args(["-u" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{security_name = V});
decode_args(["-l" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{security_level = V});
decode_args(["-a" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{auth_proto = V});
decode_args(["-A" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{auth_key = V});
decode_args(["-x" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{priv_proto = V});
decode_args(["-X" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{priv_key = V});
decode_args(["-action" | T], QConfig) ->
    [V | T2] = T,
    decode_args(T2, QConfig#query_config{action = V});
decode_args([_|T], QConfig) ->
    decode_args(T, QConfig).
