%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:1.8
%% Purpose: encoder and decoder to the types in mod ModEsnmp

-module('ModEsnmp').
-include("ModEsnmp.hrl").
-define('RT_BER',asn1rt_ber_bin_v2).
-asn1_info([{vsn,'1.8'},
            {module,'ModEsnmp'},
            {options,[{i,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,110,109,115,95,112,114,111,106,101,99,116,45,48,46,49,46,48,47,105,102,115,45,48,46,49,46,48,47,112,114,105,118,47,97,115,110,49,47,98,117,105,108,100]},ber_bin_v2,warnings,errors,{cwd,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,110,109,115,95,112,114,111,106,101,99,116,45,48,46,49,46,48,47,105,102,115,45,48,46,49,46,48]},{outdir,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,110,109,115,95,112,114,111,106,101,99,116,45,48,46,49,46,48,47,105,102,115,45,48,46,49,46,48,47,112,114,105,118,47,97,115,110,49,47,98,117,105,108,100]},nif,optimize,{i,[46]},{i,[47,104,111,109,101,47,115,101,98,47,115,114,99,47,110,109,115,95,112,114,111,106,101,99,116,45,48,46,49,46,48,47,105,102,115,45,48,46,49,46,48,47,112,114,105,118,47,97,115,110,49]}]}]).

-export([encoding_rule/0]).
-export([
'enc_TrapsTableRow'/2,
'enc_RegV2Agent'/2,
'enc_FromServer'/2,
'enc_FromClient'/2,
'enc_EsnmpPDU'/2
]).

-export([
'dec_TrapsTableRow'/2,
'dec_RegV2Agent'/2,
'dec_FromServer'/2,
'dec_FromClient'/2,
'dec_EsnmpPDU'/2
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin_v2.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1,?RT_BER:decode(Data,nif))
) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

encode_disp('TrapsTableRow',Data) -> 'enc_TrapsTableRow'(Data);
encode_disp('RegV2Agent',Data) -> 'enc_RegV2Agent'(Data);
encode_disp('FromServer',Data) -> 'enc_FromServer'(Data);
encode_disp('FromClient',Data) -> 'enc_FromClient'(Data);
encode_disp('EsnmpPDU',Data) -> 'enc_EsnmpPDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('TrapsTableRow',Data) -> 'dec_TrapsTableRow'(Data);
decode_disp('RegV2Agent',Data) -> 'dec_RegV2Agent'(Data);
decode_disp('FromServer',Data) -> 'dec_FromServer'(Data);
decode_disp('FromClient',Data) -> 'dec_FromClient'(Data);
decode_disp('EsnmpPDU',Data) -> 'dec_EsnmpPDU'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  TrapsTableRow
%%================================
'enc_TrapsTableRow'(Val) ->
    'enc_TrapsTableRow'(Val, [<<48>>]).

'enc_TrapsTableRow'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute timeStamp(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<128>>]),

%%-------------------------------------------------
%% attribute version(2) with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 19, [<<129>>]),

%%-------------------------------------------------
%% attribute fromIp(3) with type PrintableString
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 19, [<<130>>]),

%%-------------------------------------------------
%% attribute fromPort(4) with type PrintableString
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_restricted_string([], Cindex4, 19, [<<131>>]),

%%-------------------------------------------------
%% attribute credentials(5) with type PrintableString
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_restricted_string([], Cindex5, 19, [<<132>>]),

%%-------------------------------------------------
%% attribute tags(6) with type PrintableString
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_restricted_string([], Cindex6, 19, [<<133>>]),

%%-------------------------------------------------
%% attribute message(7) with type PrintableString
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_restricted_string([], Cindex7, 19, [<<134>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TrapsTableRow'(Tlv) ->
   'dec_TrapsTableRow'(Tlv, [16]).

'dec_TrapsTableRow'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute timeStamp(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],19,[131072]),

%%-------------------------------------------------
%% attribute version(2) with type PrintableString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],19,[131073]),

%%-------------------------------------------------
%% attribute fromIp(3) with type PrintableString
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],19,[131074]),

%%-------------------------------------------------
%% attribute fromPort(4) with type PrintableString
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_restricted_string(V4,[],19,[131075]),

%%-------------------------------------------------
%% attribute credentials(5) with type PrintableString
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_restricted_string(V5,[],19,[131076]),

%%-------------------------------------------------
%% attribute tags(6) with type PrintableString
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = ?RT_BER:decode_restricted_string(V6,[],19,[131077]),

%%-------------------------------------------------
%% attribute message(7) with type PrintableString
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = ?RT_BER:decode_restricted_string(V7,[],19,[131078]),

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'TrapsTableRow', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  RegV2Agent
%%================================
'enc_RegV2Agent'(Val) ->
    'enc_RegV2Agent'(Val, [<<48>>]).

'enc_RegV2Agent'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute ip(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 19, [<<128>>]),

%%-------------------------------------------------
%% attribute port(2) with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 19, [<<129>>]),

%%-------------------------------------------------
%% attribute community(3) with type PrintableString
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 19, [<<130>>]),

%%-------------------------------------------------
%% attribute user(4) with type PrintableString
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_restricted_string([], Cindex4, 19, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RegV2Agent'(Tlv) ->
   'dec_RegV2Agent'(Tlv, [16]).

'dec_RegV2Agent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute ip(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],19,[131072]),

%%-------------------------------------------------
%% attribute port(2) with type PrintableString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],19,[131073]),

%%-------------------------------------------------
%% attribute community(3) with type PrintableString
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],19,[131074]),

%%-------------------------------------------------
%% attribute user(4) with type PrintableString
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_restricted_string(V4,[],19,[131075]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'RegV2Agent', Term1, Term2, Term3, Term4}.



%%================================
%%  FromServer
%%================================
'enc_FromServer'(Val) ->
    'enc_FromServer'(Val, []).


'enc_FromServer'({'FromServer',Val}, TagIn) ->
   'enc_FromServer'(Val, TagIn);

'enc_FromServer'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      trapsTableWrite ->
         'enc_FromServer_trapsTableWrite'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  FromServer_trapsTableWrite
%%================================

'enc_FromServer_trapsTableWrite'({'FromServer_trapsTableWrite',Val}, TagIn) ->
   'enc_FromServer_trapsTableWrite'(Val, TagIn);

'enc_FromServer_trapsTableWrite'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_FromServer_trapsTableWrite_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_FromServer_trapsTableWrite_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FromServer_trapsTableWrite_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TrapsTableRow'(H, [<<48>>]),
   'enc_FromServer_trapsTableWrite_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_FromServer_trapsTableWrite'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_TrapsTableRow'(V1, [16]) || V1 <- Tlv1].




'dec_FromServer'(Tlv) ->
   'dec_FromServer'(Tlv, []).

'dec_FromServer'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'trapsTableWrite'
    {131072, V1} -> 
        {trapsTableWrite, 'dec_FromServer_trapsTableWrite'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  FromClient
%%================================
'enc_FromClient'(Val) ->
    'enc_FromClient'(Val, []).


'enc_FromClient'({'FromClient',Val}, TagIn) ->
   'enc_FromClient'(Val, TagIn);

'enc_FromClient'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      registerV2Agent ->
         'enc_RegV2Agent'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).




'dec_FromClient'(Tlv) ->
   'dec_FromClient'(Tlv, []).

'dec_FromClient'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'registerV2Agent'
    {131072, V1} -> 
        {registerV2Agent, 'dec_RegV2Agent'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  EsnmpPDU
%%================================
'enc_EsnmpPDU'(Val) ->
    'enc_EsnmpPDU'(Val, []).


'enc_EsnmpPDU'({'EsnmpPDU',Val}, TagIn) ->
   'enc_EsnmpPDU'(Val, TagIn);

'enc_EsnmpPDU'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      fromServer ->
         'enc_FromServer'(element(2,Val), [<<160>>]);
      fromClient ->
         'enc_FromClient'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).




'dec_EsnmpPDU'(Tlv) ->
   'dec_EsnmpPDU'(Tlv, []).

'dec_EsnmpPDU'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'fromServer'
    {131072, V1} -> 
        {fromServer, 'dec_FromServer'(V1, [])};


%% 'fromClient'
    {131073, V1} -> 
        {fromClient, 'dec_FromClient'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
