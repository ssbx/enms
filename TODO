##################
# MODULE MONITOR #
##################
### HIGH
- add "Create web view" wizard using erlang/httpd CGI, with running templates
examples for Python , PHP, Ruby. Create an server API accessible by the 
CGI binaries. Will be used by the wiki opus. Will allow an administrator
to create views for techs, collaborators or end users wich will not require
all the noctoupus-client functionnalities.
- create a Qt application for server configuration:
    # supercast
    . use ssl yes no,
    . use tcp yes no,
    . set server ssl certificate conf,
    . add trusted user public key,
    . ssl/tcp port,
    . ssl/tcp max connexions,
    . add user,
    . manage groups,
    . select auth_module,
    . reload supercast application
    # noctopus
    . http conf: port,
    . http conf: create web view
    . reload httpd application

### MEDIUM
- mail alerts
With treaded reply to receivers on acknowlegement. Linked to acknownledgement
system. Include childs dependencies of the check failure.
- logger_events 2 
Include concept of documented Acknoledgement.
- probe_snmp_v3 
- inspector_rrd_warn
Alerts on rrdfetch and probe status events.
Alert on value returned by rrdfetch. Compare with an AVERAGE expected
value. Apply an algorithm. Send an alert if needed.
Will need to use a gen_event somewhere in errdtools to put a fun which will 
wait for the current probe_return to be writed to the file.rrd and then query
the rrd. A delayed inspector in some way because inspectors are launch before
loggers.

### LOW
- snmp autodiscovery
- rrd_intelligent_behaviour_detection 
 Automatic alert on suspect behaviour (counter average 10 times bigger that
 normal counter for the time of the day). Will for example detect broadcast 
 storms and occasionnal high traffic.
- OCS-inventory-NG agent compatibility module.

###############################################################################
# DASHBOARD ###################################################################
###############################################################################
### HIGH
- weathermap style maps from monitor/rrds
- qt mdi with monitor/rrds and monitor/status

###############################################################################
# NET MANAGER #################################################################
###############################################################################
# MODULE LOCATOR #
### HIGH
V4-ARP V6-CDP traffic monitoring: 
    Where is/was this IP/Mac address
    MAC address traking
    VLAN tracking

# MODULE IPMAN #
### HIGH
- IP configuration view
- net mask calculator
- maps show vlan propagation

# MODULE ARPGUARD #
### HIGH
- track mac/ip history on the network
- trigger alerts on ip conflicts





##############################################################################
#                   ITIL PACK BEGIN                                          #
##############################################################################
####################
# MODULE KNOWLEDGE #
####################
### HIGH
- system documentation: a new target create a new wiki page with system 
permissions. This page will be writable by user allowed to, and auto filled 
by system events.
- mod_repport: Generate various report using sysdoc, support or other monitors

### MAYBE
ITIL pack with linked modules. Every movement in the SI is tracked and logged
in the Knowledge Wiki:
-> wiki/knowledge -> http:tickets -> todo list -> planification (shedulle)

###################
# MODULE SCHEDULE #
###################
## HIGH
Shedule everithing that need it:
- backup commands,
- sheduled alerts,
- sheduled downtime,
- every sys admin commands.

### MAYBE
- TODO tasks schedule
- general scheduler:
  - near end of support alert (contract reneval),
  - near end of registrar contract (reneval domain registration)


##################
# MODULE TICKETS #
##################
- Ticket gestion linked to mod_sysdoc

################
# MODULE TASKS #
################
- TODO list
##############################################################################
#                   ITIL PACK END                                            #
##############################################################################






#################
# MODULE EVENTS #
#################
- snmp traps handling, With logger_events
- mod_syslog Collect syslog data. Can be used to feed logger_events

#####################
# MODULE METROLOGIE #
#####################
- metrologie pmacct, netflow, sflow, rmon.




###################
# MODULE MULTIMAN #
###################


##################
# MODULE ROUTING #
##################
- mod_routing: Routing protocols monitoring/maps

TODO maybe:
smokeping probe compatibility

################
# PERFORMANCES #
################
- src/monitor_master, keep configuration in dets or file,
- src/monitor_master hibernate,


#################
# international #
#################
- move some asn elements from PrintableString to UTF8String


###########
# LICENSE #
###########
            How to Apply GNU license to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<http://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<http://www.gnu.org/philosophy/why-not-lgpl.html>.

