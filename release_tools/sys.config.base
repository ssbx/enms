[
    {supercast,
        [
            {auth_module,   supercast_auth_local},
            {acctrl_module, supercast_acctrl_rbac},

            % if a PDU come from client with key, switch it to the module
            % implementing the supercast_module_behaviour.
            {pdu_dispatch,
                [
                    % {supercast_module_behaviour, key}
                    {monitor_commander, "monitor"}
                ]
            },

            % this is the initial list of channels for the client. It must be
            % the entry point for all other channels. For example, once
            % the client subscribe to the monitor channel, this one will
            % tell the client wich chan he knows about, and wich chans
            % disapear. This module can also be a simple "beha_supercast_channel"
            % module.
            {main_channels,
                [
                    'target-MasterChan'
                ]
            },

            {tcp_client,
                [
                    {enabled, true},
                    {port, 8888},
                    {maxconn, 50},
                    {encoder, supercast_encoder_json}
                ]
            },
            {ssl_client,
                [
                    {enabled, true},
                    {ssl_conf, [
                        {certificate,   "cfg/ssl/certificate.pem"},
                        {caCertificate, "cfg/ssl/request.pem"},
                        {key,           "cfg/ssl/key.pem"}
                    ]},
                    {port, 4443},
                    {maxconn, 50},
                    {encoder, supercast_encoder_json}
                ]
            },
            {http_sync_dir, "var/yaws/docroot"},
            {http_port,     8080},
            {http_use_ssl,  false},
            {http_conf,
                [
                    {logdir, "var/yaws/log"},
                    {listen, {0,0,0,0}},
                    {compression_level, best_speed}
                ]
            }
        ]
    },
    {monitor,
        [
            {master_chan_read_perm, ["admin"]},
            {master_chan_write_perm, ["admin"]},
            {targets_data_dir,      "var/monitor"},
            {snmp_def_dir,          "cfg/snmp"},
            % TODO handle alerts (mail,sms) commands.
            {alert_commands, []}
        ]
    },
    {kernel,
        [
            {start_dist_ac, false},
            {inet_dist_listen_min, 9000},
            {inet_dist_listen_max, 9999}
            %{error_logger, {file, "var/log/error_logger.log"}}
        ]
    },
    {sasl,
        [
            {sasl_error_logger, {file, "var/log/sasl_error_logger.log"}}
        ]
    },
    {mnesia,
        [
            {dir,       "var/mnesia"},
            {debug,     none}
        ]
    },
    {snmpman, 
        [
            {java_node, 
                [
                    {java_com,
"javaw.exe -cp lib/jars/*; io.sysmo.snmpm.Snmpman var/engineID.conf >var/log/snmpman.log 2>&1"
                    }
                ]
            }
        ]
    },
    {errd4j, 
        [
            {java_node, 
                [
                    {java_com,
"javaw.exe -cp lib/jars/*; io.sysmo.errd4j.Errd4j >var/log/errd4j.log 2>&1"
                    }
                ]
            }
        ]
    },
    {nchecks, 
        [
            {java_node, 
                [
                    {java_com,
"javaw.exe -cp lib/jars/*; io.sysmo.nchecks.NChecks >var/log/nchecks.log 2>&1"
                    }
                ]
            }
        ]
    },
    {equartz, 
        [
            {java_node, 
                [
                    {java_com,
"javaw.exe -cp lib/jars/*; io.sysmo.equartz.EQuartz >var/log/equartz.log 2>&1"
                    }
                ]
            }
        ]
    }
].
